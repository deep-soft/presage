# 2024-03-04 16:00
# sed -i 's!0ad842f7646b21feca3c79d1e7f73d052529314d!9d55addebe010f0acbcabdfc02ab41979c1863e0!' presage/Cargo.toml
name: act - Build

on:
#  push:
#    branches:
#      - main
#    tags:
#      - v0.*
#  pull_request:
  workflow_dispatch:
    inputs:
      # if: ${{ inputs.patch_presage_cargo_toml }}
      patch_presage_cargo_toml:
        description: 'patch presage cargo.toml'
        type: boolean
        required: true
        default: false
      # if: ${{ inputs.build_release_windows }}
      build_release_windows:
        description: Build release Windows
        type: boolean
        required: true
        default: true
      # if: ${{ inputs.build_release_ubuntu }}
      build_release_ubuntu:
        description: Build release Ubuntu
        type: boolean
        required: true
        default: true
      # if: ${{ inputs.build_and_test }}
      build_and_test:
        description: Build and test
        type: boolean
        required: true
        default: false
      # if: ${{ inputs.rustfmt }}
      rustfmt:
        description: rustfmt
        type: boolean
        required: true
        default: false
      # if: ${{ inputs.clippy }}
      clippy:
        description: clippy
        type: boolean
        required: true
        default: false

env:
  CARGO_INCREMENTAL: 0
  TAG_NAME: "presage"
  VERSION: "v.0.6.1"
  DEBUG_LS: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_release_windows:
    name: cargo build release windows
    if: ${{ inputs.build_release_windows }}
    runs-on: windows-2019
    env:
      RUSTFLAGS: -D warnings
    steps:
      - name: Checkout repository
        uses: deep-soft/checkout@v4
          
## -- read from toml - begin
      - name: Read toml package.version
        uses: deep-soft/toml-action@v1.0.3
        id: read_toml_version
        with:
          file: 'presage/Cargo.toml'
          field: 'package.version'

      - name: Set env.PROG_VERSION
        shell: bash
        run: |
          echo "PROG_VERSION = ${{ env.PROG_VERSION }}"

          echo "set PROG_VERSION with value from Cargo.toml"
          _version_=${{ steps.read_toml_version.outputs.value }}
          prog_version="v"$_version_

          echo "PROG_VERSION = $prog_version"
          echo "TAG_VERSION=${{ env.PROG_NAME }}-$prog_version"

          echo "set env.PROG_VERSION with value from Cargo.toml"
          echo "PROG_VERSION=$prog_version" >> $GITHUB_ENV
          echo "VERSION=$_version_" >> $GITHUB_ENV
          echo "TAG_VERSION=${{ env.PROG_NAME }}-$prog_version" >> $GITHUB_ENV

      - name: Print env.PROG_VERSION
        shell: bash
        run: |
          echo "show new value for env.PROG_VERSION"
          echo "PROG_VERSION = ${{ env.PROG_VERSION }}"
          echo "TAG_VERSION  = ${{ env.TAG_VERSION  }}"
## -- read from toml - end

      - name: Patch presage/cargo.toml
        if: ${{ inputs.patch_presage_cargo_toml }}
        shell: bash
        run: |
          sed -i 's!0ad842f7646b21feca3c79d1e7f73d052529314d!9d55addebe010f0acbcabdfc02ab41979c1863e0!' presage/Cargo.toml

      - name: Install protoc
        run: |
          choco install protoc

      - name: Setup Rust toolchain
        uses: deep-soft/rust-toolchain@v1
        with:
          toolchain: stable
      
      - name: Configure CI cache
        uses: deep-soft/rust-cache@v2

      - name: Build
        run:
          cargo build --target x86_64-pc-windows-msvc --release

###
# zip release begin
      - name: Create Archive Release
        uses: deep-soft/zip-release@v2
        with:
          type: 'zip'
          filename: '${{ env.TAG_NAME }}-${{ env.PROG_VERSION  }}-${{ github.job }}.zip'
          #directory: '.'
          #path: '.'
          directory: "target/x86_64-pc-windows-msvc/release"
          path: 'presage-cli.exe'
          exclusions: '*.git* /*node_modules/* .editorconfig'
          # archive name is ${{ env.ZIP_RELEASE_ARCHIVE }}

      - name: print env value
        shell: bash
        run: |
          echo "env.ZIP_RELEASE_ARCHIVE=${{ env.ZIP_RELEASE_ARCHIVE }}"

      - name: Publish Release
        continue-on-error: true
        uses: deep-soft/action-gh-release@v1
        with:
          draft: true
          tag_name: ${{ env.TAG_NAME }}-${{ github.job }}
          files: |
            ${{ env.ASSET_REL }}
            ${{ env.ZIP_RELEASE_ARCHIVE }}
# zip release end

  build_release_ubuntu:
    name: cargo build release ubuntu
    if: ${{ inputs.build_release_ubuntu }}
    runs-on: ubuntu-20.04
    env:
      RUSTFLAGS: -D warnings
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Patch presage/cargo.toml
        if: ${{ inputs.patch_presage_cargo_toml }}
        shell: bash
        run: |
          sed -i 's!0ad842f7646b21feca3c79d1e7f73d052529314d!9d55addebe010f0acbcabdfc02ab41979c1863e0!' presage/Cargo.toml

      - name: Setup Rust toolchain
        uses: deep-soft/rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install protobuf
#          #sudo apt-get install -y libprotobuf-dev libprotobuf-c-dev protobuf-compiler protobuf-c-compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
      
      - name: Configure CI cache
        uses: deep-soft/rust-cache@v2

#      - name: Build
#        uses: actions-rs/cargo@v1
#        with:
#          command: build
#          args: --target x86_64-unknown-linux-gnu --release

      - name: Build
        run: |
          cargo build --target x86_64-unknown-linux-gnu --all-features --release

# cargo build --all-targets ${{ matrix.cargo_flags }}

###
# zip release begin
      - name: Create Archive Release
        uses: deep-soft/zip-release@v2
        with:
          type: 'zip'
          filename: '${{ env.TAG_NAME }}-${{ env.PROG_VERSION  }}-${{ github.job }}.zip'
          #directory: '.'
          #path: '.'
          directory: "target/x86_64-unknown-linux-gnu/release"
          path: 'presage-cli'
          exclusions: '*.git* /*node_modules/* .editorconfig'
          # archive name is ${{ env.ZIP_RELEASE_ARCHIVE }}

      - name: print env value
        shell: bash
        run: |
          echo "env.ZIP_RELEASE_ARCHIVE=${{ env.ZIP_RELEASE_ARCHIVE }}"

      - name: Publish Release
        continue-on-error: true
        uses: deep-soft/action-gh-release@v1
        with:
          draft: true
          tag_name: ${{ env.TAG_NAME }}-${{ github.job }}
          files: |
            ${{ env.ASSET_REL }}
            ${{ env.ZIP_RELEASE_ARCHIVE }}
# zip release end

  build_and_test:
    name: cargo build
    if: ${{ inputs.build_and_test }}
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
    steps:
      - name: Checkout repository
        uses: deep-soft/checkout@v4

      - name: Patch presage/cargo.toml
        if: ${{ inputs.patch_presage_cargo_toml }}
        shell: bash
        run: |
          sed -i 's!0ad842f7646b21feca3c79d1e7f73d052529314d!9d55addebe010f0acbcabdfc02ab41979c1863e0!' presage/Cargo.toml

      - name: Setup Rust toolchain
        uses: deep-soft/rust-toolchain@v1
        with:
          toolchain: stable
      
      - name: Configure CI cache
        uses: deep-soft/rust-cache@v2

      - name: Build
        run: |
          cargo build --all-targets --all-features
      
      - name: Run tests
        run: |
          cargo test --all-targets --all-features

      - name: Test docs
        run: |
          cargo test --doc --all-features

  rustfmt:
    name: rustfmt
    if: ${{ inputs.rustfmt }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: deep-soft/checkout@v4

      - name: Patch presage/cargo.toml
        if: ${{ inputs.patch_presage_cargo_toml }}
        shell: bash
        run: |
          sed -i 's!0ad842f7646b21feca3c79d1e7f73d052529314d!9d55addebe010f0acbcabdfc02ab41979c1863e0!' presage/Cargo.toml

      - name: Setup Rust toolchain
        uses: deep-soft/rust-toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt
      
      - name: Check code format
        run: |
          cargo fmt -- --check

  clippy:
    name: clippy
    if: ${{ inputs.clippy }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: deep-soft/checkout@v4

      - name: Patch presage/cargo.toml
        if: ${{ inputs.patch_presage_cargo_toml }}
        shell: bash
        run: |
          sed -i 's!0ad842f7646b21feca3c79d1e7f73d052529314d!9d55addebe010f0acbcabdfc02ab41979c1863e0!' presage/Cargo.toml

      - name: Setup Rust toolchain
        uses: deep-soft/rust-toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
      
      - name: Setup CI cache
        uses: deep-soft/rust-cache@v2

      - name: Run clippy lints
        run: |
          cargo clippy
